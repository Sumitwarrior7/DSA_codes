# --------------------INTEGER OVERFLOW-------------------- #
"Both long long  &  long long int are the same in C++"
Range : int  ---> (-10^9, 10^9)
        long long / long long int  ---> (-10^18, 10^18)


Max/Min : int  ---> INT_MAX, INT_MIN
          long long / long long int  ---> LLONG_MAX, LLONG_MIN
 

* This macro is used to define int as long long.

Use Below :-
#define int long long   
#define INT_MIN LLONG_MIN
#define INT_MAX LLONG_MAX
Use "signed main" instead of "int main"



# --------------------Ceil & floor-------------------- #
Ceil : The ceil function returns the smallest integer value that is greater than or equal to the given argument "x"
        For e.g., ceil(3.14) = 4

Floor : The floor function returns the largest integer value that is less than or equal to the given argument "x"
        For e.g., floor(3.14) = 3

* while divinding integers for ceil & floor usage, use static typecasting : static_cast<double>(your_int_variable)



# For bracket matching : Use Stack ds



# --------------------Data Structure InterConversion-------------------- #
* String <--> Int  
                ------> (string -> int) =  stoi(str_val)
                ------> (int -> string) =  to_string(int_val)

* Char <--> Int  
                ------> (Char -> int) =>   char c = chr_val - '0'
                ------> (int -> char) =>    int i = int_val - '0'



# --------------------Floating-point precision issues-------------------- #
* When dealing with floating-point numbers, it's generally a good idea to avoid direct equality comparisons due to precision issues
* Instead, use epsilon value to check if two floating-point numbers are close enough
* Floating point numbers : float, double
        const double EPSILON = 1e-9;
        double am;
        double dm;
        if we want to check whether am is equal to dm or not ----> if (abs(am - dm) < EPSILON)



# --------------------Points to remember for DP-------------------- #
1) During memoization, if there is a base case which checks for "out of bound" values in its condition
        ---> memo will get the out of bound values in its parameters due to which memo will throw error
                ---> "runtime error: addition of unsigned offset"

                

# --------------------Points to remember for Binary tree-------------------- #
1) Whenever ther is question like finding diameter, longest path, maximum path sum
        ---> At each node, try to return the longest continuous path containing the node under recursion [ return 1+max(l, r) ]
        ---> Actual ans will be stored in a variable [ ans = max(ans, 1+l+r) ]

2) In most 'Tree' problems, they are solved using recursion(not DP)



# --------------------Always remember this algo, while detecting cycles-------------------- #
Two-Pointer Method (Floyd's Cycle-Finding Algorithm)
        --> This method uses 2 pointers that traverse the list at different speeds. The slow pointer moves 1 step at a time, 
            while the fast pointer moves 2 steps. If there is a cycle, the fast pointer will eventually catch up to the slow pointer.
            slow = slow->next;
            fast = fast->next->next;      


# --------------------Points to remember for queries based problem-------------------- #
1) Try to think of Segment Tree first
   If segment tree approach is not working, then try to 'sort' the queries-array and think may be it can help reduce time complexity
2) If queries-based problem is related to "GRAPH" --> Try to think of 'DSU'
3) If queries-based problem is related to "INTERVALS" --> Try to 'sort' the intervals-array, for that we can use heaps, sets, multisets


# --------------------PALINDROME based problem-------------------- #
If 'palindrome' based problem comes
        --> Think of matching string with reversed string 
        --> Think of taking mid as starting point for palindrome 
                --> simultaneously go left and right, and if both are equal->repeat the step
                --> check for both odd sized and even sized palindromes
        --> Think of DP
        --> Always remember in a palindrome(Useful in problems where you've to check wther its poosible to make palindrome by any rearranging the characters in the string) :-
                you can either have 1 character with odd frequency in palindrome 
                OR you will have no character with odd frequency


# --------------------Points to remember for BITS MANIPULATION-------------------- #
1) If you are using masks like (1<<i), it will work fine for 'int' values i.e., for 32 bits
        --> But above technique will fail for 'long long' values i.e., for 64 bits
                --> For that use (1LL<<i)




